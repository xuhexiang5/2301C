Vue:渐进式框架,主张就是只负责自己的事情,Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合,在不同层次可以使用不同的概念


 Vue的特点
1.遵循 MVVM 模式,mvc,mvp

mvvm,mvc,mvp的区别
MVC中View会直接从Model中读取数据而不是通过 Controller；View和 Controller之间存在多对一关系。

MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部；View和Presenter之间是一对一关系。

MVVM 模式基本上与 MVP 模式完全一致，唯一的区别是：MVVM采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。


Vue中有2种数据绑定的方式:
1.单向绑定(v-bind): 数据只能从data流向页面。
2.双向绑定(v-model): 数据不仅能从data流向页面，还可以从页面流向data。
备注:
1.双向绑定一般都应用在表单类元素上 (如: input、select等)2.v-model:value 可以简写为 v-model。


1.el有2种写法
(1).new Vue时候配置el属性。
(2).先创建Vue实例，随后再通过vm.$mount('#root')指定el的值。
2.data有2种写法
(1).对象式(2).函数式
如何选择: 目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。
3.一个重要的原则
由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了


1.Vue中的数据代理:
	通过vm对象来代理data对象中属性的操作 (读/写)
2.Vue中数据代理的好处:
	更加方便的操作data中的数据
3.基本原理
	通过Object.defineProperty()把data对象中所有属性添加到vm上为每	一个添加到vm上的属性，都指定一个getter/setter.在getter/setter	内部去操作 (读写) data中对应的属性。


Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。


 const vm = new Vue({
	el:'#root'
	data:{
	   name:'高薪就业,
	   address:'宏福科技园
	}
  })
console.log(vm);